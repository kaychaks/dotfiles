# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# up a couple of dirs. preserves $OLDPWD
function up {
	cd $(eval printf '../'%.0s {1..$1}) && pwd
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Open a given port on localhost in the browser
function openport() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	openport $port
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Get gzipped file size
function gz() {
	echo "orig size (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# Get gzipped file size in kilobytes
function gzk() {
	echo "orig size (kilobytes): "
	cat "$1" | wc -c| awk '{print $0, "/ 1024"}' | bc
	echo "gzipped size (kilobytes): "
	gzip -c "$1" | wc -c | awk '{print $0, "/ 1024"}' | bc
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Gzip-enabled `curl`
function gurl() {
	curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}

#sniff short-urls
function longurl() {
	curl --silent --location --head "$1" | grep -E "^Location: " | tail -n 1 | awk -F': ' '{print $2}'
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# ES friendly curl
function elastic() {
	curl -s "$@" | json
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# kill whatever is LISTENing an a given port, e.g. killport 9200. (killport 9200 -9 if you want to be ugly)
function killport() {
	local port=$1
	shift 1
    lsof -i :$port | grep LISTEN | awk '{print $2}' | xargs kill $@
	# This would kill everything, also connected clients
    # lsof -i :$port -Fp | cut -dp -f2 | xargs kill $@
}

# open URL in new Chrome w/o Chrome UI
function google-chrome-app() {
	"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --user-data-dir=/Users/knut/tmp/chrometmp --app="$1"
}

# list available JDKs
function jls() {
  echo "Use ´j6, j7 and j8´ to conventiently switch between Java versions."
  echo "For a specific version use ´ju <version>´ where available versions are listed below:"
  /usr/libexec/java_home -V 2>&1 | grep -P "\d.\d.\d" | cut -d , -f 1 | colrm 1 4 | grep -v Home
}

# quickswitch a JDK
function ju() {
  export JAVA_HOME=$(/usr/libexec/java_home -v $1)
  export PATH=$JAVA_HOME/bin:$PATH
  java -version
}
